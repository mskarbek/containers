---
- hosts: "localhost"
  gather_facts: false
  vars_files:
    - "vars/common.yaml"
    - "vars/main.yaml"
  tasks:
    - ansible.builtin.import_tasks:
        file: "tasks/buildah_create.yaml"
# Ansible DNF module issue:
# https://github.com/ansible/ansible/issues/80644
    - ansible.builtin.command:
        cmd: >
          dnf
          --quiet
          --assumeyes
          --disableplugin="subscription-manager"
          --config={{ container_path }}/etc/dnf/dnf.conf
          --installroot={{ container_path }}
          install
          curl
    - ansible.builtin.file:
        dest: "{{ container_path }}{{ item }}"
        state: "directory"
        owner: "root"
        group: "root"
        mode: "0755"
      loop:
        - "/usr/lib/sonatype/nexus"
    - ansible.builtin.get_url:
        url: "{{ nexus_public_url[base_name] }}"
        dest: "{{ result_tempfile.path }}/nexus-{{ nexus_version }}-unix.tar.gz"
        force: true
        owner: "root"
        group: "root"
        mode: "0644"
      when: "assents == 'remote'"
    - ansible.builtin.get_url:
        url: "{{ nexus_proxy_url[base_name] }}"
        dest: "{{ result_tempfile.path }}/nexus-{{ nexus_version }}-unix.tar.gz"
        force: true
        username: "{{ repository_username }}"
        password: "{{ repository_password }}"
        owner: "root"
        group: "root"
        mode: "0644"
      when: "assents == 'proxy'"
    - ansible.builtin.unarchive:
        src: "{{ result_tempfile.path }}/nexus-{{ nexus_version }}-unix.tar.gz"
        dest: "{{ result_tempfile.path }}"
    - ansible.posix.synchronize:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        archive: false
        links: true
        recursive: true
        rsync_opts:
          - "--exclude=.gitkeep"
          - "--ignore-existing"
      loop:
        - src: "{{ result_tempfile.path }}/nexus-{{ nexus_version }}/"
          dest: "{{ container_path }}/usr/lib/sonatype/nexus/"
        - src: "{{ result_tempfile.path }}/sonatype-work"
          dest: "{{ container_path }}/usr/lib/sonatype/"
        - src: "rootfs/"
          dest: "{{ container_path }}/"
    - ansible.builtin.replace:
        dest: "{{ container_path }}/usr/lib/sonatype/nexus/bin/nexus.vmoptions"
        regexp: "=../sonatype-work/"
        replace: "=/var/lib/sonatype-work/"
    - ansible.builtin.file:
        dest: "{{ container_path }}/usr/lib/sonatype/nexus/deploy/nexus-repository-dart-{{ nexus_dart_version }}-bundle.kar"
        state: "touch"
        owner: "root"
        group: "root"
        mode: "0644"
    - ansible.builtin.get_url:
        url: "{{ nexus_dart_public_url }}"
        dest: "{{ container_path }}/usr/lib/sonatype/nexus/deploy/nexus-repository-dart-{{ nexus_dart_version }}-bundle.kar"
        owner: "root"
        group: "root"
        mode: "0644"
      when: "assents == 'remote'"
    - ansible.builtin.get_url:
        url: "{{ nexus_dart_proxy_url }}"
        dest: "{{ container_path }}/usr/lib/sonatype/nexus/deploy/nexus-repository-dart-{{ nexus_dart_version }}-bundle.kar"
        owner: "root"
        group: "root"
        mode: "0644"
      when: "assents == 'proxy'"
    - ansible.builtin.file:
        dest: "{{ container_path }}{{ item.dest }}"
        state: "{{ item.state }}"
        owner: "root"
        group: "root"
        mode: "{{ item.mode }}"
      loop:
        - state: "directory"
          dest: "/usr/lib/sonatype/sonatype-work/nexus3/etc"
          mode: "0755"
        - state: "touch"
          dest: "/usr/lib/sonatype/sonatype-work/nexus3/etc/nexus.properties"
          mode: "0644"
    - ansible.builtin.lineinfile:
        dest: "{{ container_path }}/usr/lib/sonatype/sonatype-work/nexus3/etc/nexus.properties"
        line: "nexus.datastore.enabled=true"
        state: "present"
      when: "base_name == 'openjdk17'"
    - ansible.posix.synchronize:
        src: "rootfs/"
        dest: "{{ container_path }}/"
        archive: false
        links: true
        recursive: true
        rsync_opts:
          - "--exclude=.gitkeep"
          - "--ignore-existing"
# Unfortunately, some mirrors use TLS certificates that, to be accepted, force LEGACY crypto policies
    - ansible.builtin.command:
        cmd: "{{ item }}"
      loop:
        - "buildah run --network none {{ container_uuid }} update-crypto-policies --set LEGACY"
        - "buildah run --network none {{ container_uuid }} systemctl enable nexus.service"
        - "buildah config --volume /var/lib/sonatype-work {{ container_uuid }}"
    - ansible.builtin.import_tasks:
        file: "tasks/buildah_commit.yaml"
